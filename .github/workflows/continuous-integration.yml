name: "Continuous Integration"

on:
  pull_request: null
  push:
    branches:
      - "*.x"
      - "master"
  schedule:
    - cron: "42 3 * * 1"

jobs:
  phpunit-mysql:
    name: ${{ matrix.job }}${{ matrix.name }} (PHP ${{ matrix.php-version }} / MySQL ${{ matrix.mysql-version }})
    runs-on: "ubuntu-20.04"

    strategy:
      matrix:
        php-version:
          - "8.1"
          - "8.2"
          - "8.3"
        mysql-version:
          - "8.0"
        dependencies:
          - "highest"
        job:
          - Tests
        # https://stackoverflow.com/questions/60902904/how-to-pass-mysql-native-password-to-mysql-service-in-github-actions
        custom-entrypoint:
          - --entrypoint sh mysql:8 -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"
        include:
          - php-version: "8.3"
            mysql-version: "8.0"
            custom-entrypoint: ~
            job: Tests

          - php-version: "8.3"
            mysql-version: "5.7"
            custom-entrypoint: ~
            job: Tests

          - php-version: "8.3"
            mysql-version: "5.7"
            job: Tests

          - php-version: "8.3"
            mysql-version: "8.0"
            job: Infection

          - dependencies: "lowest"
            php-version: "8.1"
            mysql-version: "5.7"
            name: Lowest deps

    services:
      mysql:
        image: "mysql:${{ matrix.mysql-version }}"

        options: >-
          --health-cmd "mysqladmin ping --silent"
          -e MYSQL_ALLOW_EMPTY_PASSWORD=yes
          -e MYSQL_DATABASE=test
          ${{ matrix.custom-entrypoint }}
        ports:
          - "3306:3306"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          fetch-depth: 2

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          coverage: "pcov"
          ini-values: "zend.assertions=1"
          extensions: "mysqli, pdo_mysql"

      - name: Install dependencies
        uses: ramsey/composer-install@v3
        with:
          dependency-versions: ${{ matrix.dependencies }}
          composer-options: --prefer-dist

      - name: "Run PHPUnit with coverage"
        run: "vendor/bin/phpunit -c ci/github/phpunit/phpunit.xml --coverage-clover=coverage.xml"
        if: matrix.job == 'Tests'

      - name: "Run mutation testing with Infection"
        run: "vendor/bin/infection --ansi --show-mutations"
        if: matrix.job == 'infection'

      - name: Upload code coverage
        uses: codecov/codecov-action@v4
        with:
          file: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
        if: matrix.job == 'Tests'

  quality-checks:
    runs-on: ubuntu-20.04
    name: ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - name: Code style
            commandName: Run code style check
            command: vendor/bin/php-cs-fixer fix --dry-run --ansi --verbose
          - name: Psalm
            commandName: Run Psalm analysis
            command: vendor/bin/php-cs-fixer fix --dry-run --ansi --verbose

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}

      - name: Install dependencies
        uses: ramsey/composer-install@v3
        with:
          dependency-versions: highest
          composer-options: --prefer-dist

      - name: ${{ matrix.commandName }}
        run: ${{ matrix.command }}
